#!/bin/bash

AWS_DEFAULT_REGION="eu-west-2"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
DOJO_IMAGE_VERSION="nhsdev/deductions-infra-dojo:a3ce7038c095298273348419769e327039009bf5"

function get_latest_commit_hash {
  export COMMIT_HASH=$(git rev-parse HEAD | cut -c 1-7)
}

function create_build_trace_id {
  if [ -z $GO_PIPELINE_NAME ]; then
    export BUILD_TRACE_ID=local
  else
    git_hash=$(echo $GO_REVISION_GIT | cut -c 1-8)
    candidate_build_trace_id="$GO_PIPELINE_NAME@$GO_PIPELINE_COUNTER@$GO_STAGE_NAME@$GO_STAGE_COUNTER@$GO_JOB_NAME@$git_hash"

    export BUILD_TRACE_ID=$(echo "$candidate_build_trace_id" | awk '{ print substr( $0, length($0) - 62, length($0) ) }' | sed "s/^[-]*//")
  fi
}

function get_aws_ssm_secret {
  secret_id=$1
  json=$(dojo -image "$DOJO_IMAGE_VERSION" "aws ssm get-parameter --with-decryption --region eu-west-2 --name $secret_id")
  if [ $? != 0 ]; then
    >&2 echo "Failed to obtain AWS secret from SSM: $secret_id"
    exit 5
  fi
  echo $json | jq -r ".Parameter.Value"
}

function _get_aws_ssm_secret {
  secret_id=$1
  json=$(aws ssm get-parameter --with-decryption --region "eu-west-2" --name $secret_id)
  if [ $? != 0 ]; then
    >&2 echo "Failed to obtain AWS secret from SSM: $secret_id"
    exit 5
  fi
  echo $json | jq -r ".Parameter.Value"
}

function docker_login {
  >&2 echo Logging in to Amazon ECR...
  eval $(dojo -image "$DOJO_IMAGE_VERSION" "aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION")
}

function get_aws_account_id {
    AWS_ACCOUNT_ID=$(dojo -image "$DOJO_IMAGE_VERSION" "aws sts get-caller-identity | jq -r .Account")
 }

function configure_docker_repository_uri {
  docker_login
  get_aws_account_id
  export REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/$IMAGE_REPO_NAME
}

function configure_docker_registry_uri {
  docker_login
  get_aws_account_id
  export REGISTRY_URI=$AWS_ACCOUNT_ID.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
}

function assume_ci_agent_role {
  CURRENT_DIR=$(pwd)
  cd "$SCRIPT_DIR"
  eval $(dojo -image "$DOJO_IMAGE_VERSION" "./aws-helpers assume_ci_agent_role $1")
  cd "$CURRENT_DIR"
}

function _assume_ci_agent_role {
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN

  environment=$1
  aws_account_arn=$(aws sts get-caller-identity | jq -r .Arn)
  create_build_trace_id

  if [[ $aws_account_arn =~ "gocd_agent-prod" && $environment = "dev" ]]; then
    >&2 echo "Assuming ci-agent-role in dev account"

    desired_account_id=$(_get_aws_ssm_secret "/repo/${environment}/user-input/external/aws-account-id")
    desired_role_arn="arn:aws:iam::$desired_account_id:role/repository-ci-agent"

    >&2 echo "Build trace ID: $BUILD_TRACE_ID"
    json="$(aws sts assume-role --role-arn "$desired_role_arn" --role-session-name "$BUILD_TRACE_ID")"

    export AWS_ACCESS_KEY_ID="$(echo "$json" | jq -r .Credentials.AccessKeyId)"
    export AWS_SECRET_ACCESS_KEY="$(echo "$json" | jq -r .Credentials.SecretAccessKey)"
    export AWS_SESSION_TOKEN="$(echo "$json" | jq -r .Credentials.SessionToken)"
  else
    >&2 echo "Not assuming the role in current identity / environment configuration: $aws_account_arn / $environment"
  fi
}

function promote_docker_image {
  # e.g. deductions/ehr-repo:1ab321
  SRC_IMAGE_NAME_AND_TAG=$1
  ENVIRONMENT=$2
  if [ -z "$SRC_IMAGE_NAME_AND_TAG" ]; then
    >&2 echo "Image name and tag must be specified. e.g. deductions/ehr-repo:1ab321"
    exit 5;
  fi
  if [ -z "$ENVIRONMENT" ]; then
    >&2 echo "Environment must be specified. e.g. dev"
    exit 5;
  fi
  declare -A from_environment_promotion_map=( ["dev"]="ci" ["test"]="dev")
  declare -A to_environment_promotion_map=( ["dev"]="dev" ["test"]="ci")

  environment_from=${from_environment_promotion_map[$ENVIRONMENT]}
  environment_to=${to_environment_promotion_map[$ENVIRONMENT]}

  >&2 echo "Promoting docker image to $environment_from to $environment_to..."

  assume_ci_agent_role "$environment_from"
  configure_docker_registry_uri
  IMAGE_FULL_URL="$REGISTRY_URI/$SRC_IMAGE_NAME_AND_TAG"
  echo "Pulling the image from $IMAGE_FULL_URL"
  docker pull "$IMAGE_FULL_URL"
  docker tag "$IMAGE_FULL_URL" "$SRC_IMAGE_NAME_AND_TAG"

  assume_ci_agent_role "$environment_to"
  configure_docker_registry_uri
  IMAGE_FULL_URL="$REGISTRY_URI/$SRC_IMAGE_NAME_AND_TAG"
  docker tag "$SRC_IMAGE_NAME_AND_TAG" "$IMAGE_FULL_URL"
  echo "Pushing the image to $IMAGE_FULL_URL"
  docker push "$IMAGE_FULL_URL"
}

###########
## TASKS ##
###########

command="$1"
case "${command}" in
  assume_ci_agent_role)
    _assume_ci_agent_role $2
    echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
    echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
    echo "export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN"
  ;;
esac
